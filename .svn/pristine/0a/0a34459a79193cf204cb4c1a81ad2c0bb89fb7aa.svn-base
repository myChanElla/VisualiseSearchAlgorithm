package visualisation.grid;
import java.awt.Color;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JToggleButton;

import java.awt.GridLayout;
import javax.swing.JComboBox;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Set;
import java.awt.event.ActionEvent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JButton;
import javax.swing.SwingConstants;
import javax.swing.UIManager;

import basics.Coordinate;
import basics.GraphGenerator;
import basics.Node;
import visualisation.VisualisationUI;

import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;

public class GridMaker {

	private JFrame frame;
	private JButton b;
	
	public boolean startButton;
	public boolean goalButton;
	public boolean blockButton;
	
	public static int chosenX;
	public static int chosenY;
	public static Node start;
	public static Node end;
	public static String searchType = "Depth First Search";
	
	public static ArrayList<JButton> gridButton ; //list of Buttons
	public static ArrayList<Coordinate> gridCoord;//= new ArrayList<Coordinate>(); //list of Coordinates
	public static LinkedHashMap<String,Coordinate> linkage;//= new LinkedHashMap<String, Coordinate>(); //links between button Name(string coordinate) and coordinate
	private static Set<Node> blockSet;//= new HashSet<>();
	private static ArrayList<Node> block;//= new ArrayList<Node>();
	public static ArrayList<Node> obstacles;//= new ArrayList<Node>();
	
	//Boolean flags for which search is selected by the user
	public boolean isDFS = false;
	public boolean isBFS = false;
	public boolean isAstar = false;
	
	/**
	 * Launch the application.
	 */
	public static void openUI()
	{
		EventQueue.invokeLater(new Runnable() 
		{
			public void run() 
			{
				try 
				{
					GridMaker window = new GridMaker();
					window.frame.setVisible(true);
				} 
				catch (Exception e) 
				{
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the application.
	 */
	public GridMaker() {
		initialize();
		gridCoord = new ArrayList<Coordinate>();
		linkage = new LinkedHashMap<String, Coordinate>();
		blockSet= new HashSet<>();
		block= new ArrayList<Node>();
		obstacles= new ArrayList<Node>();
	}

	/**
	 * Initialize the contents of the frame.
	 */
	private void initialize() {
		frame = new JFrame();
		frame.getContentPane().setEnabled(false);
		frame.getContentPane().setBackground(Color.DARK_GRAY);
		frame.setBounds(100, 100, 1000, 700);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLocationRelativeTo(null);
				
		UIManager.put("ScrollBar.thumbHighlight", Color.LIGHT_GRAY);         
		UIManager.put("ScrollBar.thumbDarkShadow", Color.LIGHT_GRAY);
		UIManager.put("ScrollBar.highlight", Color.LIGHT_GRAY);
		UIManager.put("ScrollBar.trackHighlight", Color.LIGHT_GRAY);
		UIManager.put("ScrollBar.trackHighlight", Color.LIGHT_GRAY);
		UIManager.put("ComboBox.selectionBackground", Color.LIGHT_GRAY);
		
		GridBagLayout gridBagLayout = new GridBagLayout();
		gridBagLayout.columnWidths = new int[]{0,0};
		gridBagLayout.rowHeights = new int[]{0,0};
		gridBagLayout.columnWeights = new double[]{0.5,1.0,1.0};
		gridBagLayout.rowWeights = new double[]{1.0,1.0};
		frame.getContentPane().setLayout(gridBagLayout);
		
		//These are the values for the grid x and y combo boxes 
		Integer[] m = {5, 6, 7, 8, 9, 10}; 
		Integer[] n = {5, 6, 7, 8, 9, 10}; 
		chosenX = chosenX+5;
		chosenY = chosenY+5;

//----------------------------------------Create GridMakerPanel which allows used to enter details to customise grid---------------		
		JPanel gridMakerPanel = new JPanel();
		gridMakerPanel.setBackground(Color.LIGHT_GRAY);
		gridMakerPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
		GridBagConstraints gbc_gridMakerPanel = new GridBagConstraints();
		gbc_gridMakerPanel.fill = GridBagConstraints.BOTH;
		gbc_gridMakerPanel.insets = new Insets(50, 5, 5, 5);
		gbc_gridMakerPanel.gridx = 0;
		gbc_gridMakerPanel.gridy = 0;
		frame.getContentPane().add(gridMakerPanel, gbc_gridMakerPanel);
		GridBagLayout gbl_gridMakerPanel = new GridBagLayout();
		gbl_gridMakerPanel.columnWidths = new int[]{0, 0};
		gbl_gridMakerPanel.rowHeights = new int[]{0, 0};
		gbl_gridMakerPanel.columnWeights = new double[]{1.0, 1.0, 1.0, 1.0, 1.0};
		gbl_gridMakerPanel.rowWeights = new double[]{1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0};
		gridMakerPanel.setLayout(gbl_gridMakerPanel);
		//----------------------------------------Add label to tell the user to select a grid size---------------		
		JLabel lblSizeOfBoard = new JLabel("Size of Board: ");
		lblSetUp(lblSizeOfBoard, gridMakerPanel, 0, 0, 5);
	
		//----------------------------------------Display gridX and gridy combo boxes to allow the user to choose a grid size---------------		
		JComboBox gridXComboBx = new JComboBox(m);
		gridXComboBx.setToolTipText("X coordinate");
		ComboBoxSetUp(gridXComboBx, gridMakerPanel, 0, 1,1);
			
		gridXComboBx.addItemListener(
				new ItemListener()
				{
					public void itemStateChanged(ItemEvent event)
					{
						if(event.getStateChange()==ItemEvent.SELECTED)
						{
							chosenX = m[gridXComboBx.getSelectedIndex()];
						}
					}
				}
		);
				
		//label indicating times
		JLabel lblX = new JLabel("X");
		lblX.setHorizontalAlignment(SwingConstants.CENTER);
		lblSetUp(lblX, gridMakerPanel, 1, 1, 1);
		
		JComboBox gridYComboBox = new JComboBox(n);
		gridYComboBox.setToolTipText("Y coordinate");
		ComboBoxSetUp(gridYComboBox, gridMakerPanel, 2, 1, 1);
	
		
		gridYComboBox.addItemListener(
				new ItemListener()
				{
					public void itemStateChanged(ItemEvent event)
					{
						if(event.getStateChange()==ItemEvent.SELECTED)
						{
							chosenY = n[gridYComboBox.getSelectedIndex()];							
						}
						
					}
				}
		);
		
		//Create a create grid button to paint the grid buttons onto the JPanel once pressed
		JButton createGridBtn = new JButton("Create Grid");
		createGridBtn.setToolTipText("Generate the grid");
		ChangeButtonColour(createGridBtn, gridMakerPanel, 0, 3, 3);
		
		JButton selectGoalNodeBtn = new JButton("Select Goal Node");
		selectGoalNodeBtn.setToolTipText("Select the goal of the search");
		ChangeButtonColour(selectGoalNodeBtn, gridMakerPanel, 0, 6, 3);
			
		JToggleButton setBlocksBtn = new JToggleButton("Set Blocks");
		setBlocksBtn.setToolTipText("Select blocked nodes");
		setBlocksBtn.setFont(new Font("Yu Gothic UI Semibold", Font.PLAIN, 11));
		setBlocksBtn.setBackground(Color.DARK_GRAY);
		setBlocksBtn.setForeground(new Color(210, 105, 30));
		GridBagConstraints gbc_setBlocksBtn = new GridBagConstraints();
		gbc_setBlocksBtn.gridwidth = 3;
		gbc_setBlocksBtn.fill = GridBagConstraints.BOTH;
		gbc_setBlocksBtn.insets = new Insets(5, 5, 5, 5);
		gbc_setBlocksBtn.gridx = 0;
		gbc_setBlocksBtn.gridy = 7;
		gridMakerPanel.add(setBlocksBtn, gbc_setBlocksBtn);
		
		JButton selectStartBtn = new JButton("Select Start Node");
		selectStartBtn.setToolTipText("Select start node of the search");
		ChangeButtonColour(selectStartBtn, gridMakerPanel, 0, 5, 3);
		
		//Create a JPanel for the grid board   300
		JPanel mainPanel = new JPanel();
		mainPanel.setBackground(Color.DARK_GRAY);
		GridBagConstraints gbc_mainPanel = new GridBagConstraints();
		gbc_mainPanel.fill = GridBagConstraints.BOTH;
		gbc_mainPanel.gridwidth = 2;
		gbc_mainPanel.gridheight = 2;
		gbc_mainPanel.gridx = 1;
		gbc_mainPanel.gridy = 0;
		gbc_mainPanel.insets = new Insets(20, 20, 20, 20);
		frame.getContentPane().add(mainPanel, gbc_mainPanel);
				
		createGridBtn.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent arg0) 
			{
				
				mainPanel.removeAll();
							
				gridCoord.clear();		
				gridButton = new ArrayList<JButton>();
				//set the grid layout of board + assign coordinates to them
				mainPanel.setLayout(new GridLayout(chosenY, chosenX));
								
				for(int m=0; m < chosenY ; m++)
				{
					for(int n=0; n < chosenX; n++)
					{
						b=new JButton();
						b.setBackground(Color.WHITE);
						mainPanel.add(b);
						b.setActionCommand("("+ n + "," + m + ")"); //assign string coordinate to the button
						gridButton.add(b);
						Coordinate element = new Coordinate(n,m); //create list of Coordinates according to size of board
						gridCoord.add(element);
					}
				}
						

				for(int i=0; i<gridButton.size();i++)
				{
					gridButton.get(i).addActionListener(new ActionListener()
						{
							public void actionPerformed(ActionEvent event)
							{
								int index = gridButton.indexOf(event.getSource());
								if(index>=0)
								{
									if(startButton==true)
									{
										//make sure it hasn't been chosen before
										if(start!=null)
										{
											for(int i=0; i<gridButton.size();i++)
											{
												if(gridButton.get(i).getBackground()==Color.green)
												{
													gridButton.get(i).setBackground(Color.DARK_GRAY);
												}
											}
											start=null; //set the start node back to null	
										}			
										gridButton.get(index).setBackground(Color.green); //set button to red
														
										Coordinate a= linkage.get(gridButton.get(index).getActionCommand());//retrieve the grid coordinate
																								
										start=new Node(a, true);//create the start Node.
														
										startButton=false;
										selectGoalNodeBtn.setEnabled(true);
										setBlocksBtn.setEnabled(true);
									}
									else if(goalButton==true)
									{
										//make sure it hasn't been chosen before
										if(end!=null)
										{
											for(int i=0; i<gridButton.size();i++)
											{
												if(gridButton.get(i).getBackground()==Color.red)
												gridButton.get(i).setBackground(Color.DARK_GRAY);
											}
											end=null; //set the end node back to null
										}
															
										gridButton.get(index).setBackground(Color.red);//set button to green
															
										Coordinate b= linkage.get(gridButton.get(index).getActionCommand());//retrieve the grid coordinate
																							
										end=new Node(b, true);//set the goal node
													
										goalButton=false;
										selectStartBtn.setEnabled(true);
										setBlocksBtn.setEnabled(true);
									}
									else if(blockButton==true)
									{
										//if selected, allow change of board
										if(setBlocksBtn.isSelected())
										{
											if(gridButton.get(index).getBackground()==Color.LIGHT_GRAY)
											{
												gridButton.get(index).setBackground(Color.WHITE);
											}
											else
											{
												gridButton.get(index).setBackground(Color.LIGHT_GRAY);
											}			
											Coordinate c = linkage.get(gridButton.get(index).getActionCommand());//retrieve the grid coordinate
											Node n= new Node(c, false);
											
											block.add(n);
																					}
										else
										{
												selectStartBtn.setEnabled(true);
												selectGoalNodeBtn.setEnabled(true);
												blockButton=false;
																								
										}
									}
									else
									{
										JOptionPane.showMessageDialog(null, "What do you want to put here?");
									}
								}
							}
						});
					}

				 //put the two arrays into a linked hash map for easier calling in the furure
					for(int i=0; i<gridCoord.size();i++)
					{
							linkage.put(gridButton.get(i).getActionCommand(), gridCoord.get(i));
					}
									
					//frame.getContentPane().add(mainPanel);
						mainPanel.revalidate();
						mainPanel.repaint();
					}
				});
				
//----------------------------------user select start node-----------------------		
				
		selectStartBtn.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent arg0) 
			{
				startButton = true;
				//set an icon ---> make sure they choose the grid first before they can choose other selection button
				selectGoalNodeBtn.setEnabled(false);
				setBlocksBtn.setEnabled(false);	
			}
		});

//---------------------------------create buttons------------------------
		selectGoalNodeBtn.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				goalButton = true;
				
				selectStartBtn.setEnabled(false);
				setBlocksBtn.setEnabled(false);
			}
		});

		setBlocksBtn.addMouseListener(new MouseAdapter()
		{
			public void mouseEntered(MouseEvent evt)
            {
            	setBlocksBtn.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            	setBlocksBtn.setBackground(new Color(210, 105, 30));
            	setBlocksBtn.setForeground(Color.DARK_GRAY);
            }
            public void mouseExited(MouseEvent evt)
            {
            	setBlocksBtn.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
            	setBlocksBtn.setBackground(Color.DARK_GRAY);
            	setBlocksBtn.setForeground(new Color(210, 105, 30));
            }
            public void mousePressed(MouseEvent evt)
            {
            	setBlocksBtn.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
            }
            public void mouseReleased(MouseEvent evt)
            {
            	setBlocksBtn.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
            }
		});

		JLabel clickAgainLabel = new JLabel("<html>click again to <br>\r\ndeselect blocks<html>");
		GridBagConstraints gbc_clickAgainLabel = new GridBagConstraints();
		gbc_clickAgainLabel.insets = new Insets(5, 5, 5, 5);
		gbc_clickAgainLabel.fill = GridBagConstraints.BOTH;
		gbc_clickAgainLabel.gridwidth = 2;
		gbc_clickAgainLabel.gridx = 3;
		gbc_clickAgainLabel.gridy = 7;
		gridMakerPanel.add(clickAgainLabel, gbc_clickAgainLabel);
		clickAgainLabel.setVisible(false);
		setBlocksBtn.addActionListener(new ActionListener()
		{
			public void actionPerformed(ActionEvent e)
			{
				if(setBlocksBtn.isSelected())
				{
					clickAgainLabel.setVisible(true);
					blockButton=true;
					System.out.println("blockButton is chosen");
					selectStartBtn.setEnabled(false);
					selectGoalNodeBtn.setEnabled(false);
				}
				else
				{
					clickAgainLabel.setVisible(false);
					selectStartBtn.setEnabled(true);
					selectGoalNodeBtn.setEnabled(true);
				}
			}
		});
			
		JPanel searchPanel = new JPanel();
		searchPanel.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
		searchPanel.setBackground(Color.LIGHT_GRAY);
		GridBagConstraints gbc_searchPanel = new GridBagConstraints();
		gbc_searchPanel.fill = GridBagConstraints.BOTH;
		gbc_searchPanel.insets = new Insets(50, 5, 50, 5);
		gbc_searchPanel.gridx = 0;
		gbc_searchPanel.gridy = 1;
		frame.getContentPane().add(searchPanel, gbc_searchPanel);
		GridBagLayout gbl_searchPanel = new GridBagLayout();
		gbl_searchPanel.columnWidths = new int[]{0, 0, 0};
		gbl_searchPanel.rowHeights = new int[]{0, 0};
		gbl_searchPanel.columnWeights = new double[]{1.0, 0.0,1.0};
		gbl_searchPanel.rowWeights = new double[]{1.0,1.0,1.0};
		searchPanel.setLayout(gbl_searchPanel);
	
//-----------------------------------------Start to search-----------------------------		
																		
		JLabel searchTypeLbl = new JLabel("Search type");
		lblSetUp(searchTypeLbl, searchPanel, 0, 0, 1);																
																									
//--------------------------------------------------ComboBox for choosing search methods---------------------------		
																								
		JComboBox<String> searchTypeComboBox = new JComboBox<String>();
		ComboBoxSetUp(searchTypeComboBox, searchPanel, 0, 1, 2);
		searchTypeComboBox.setModel(new DefaultComboBoxModel(new String[] {"Depth First Search", "Breadth First Search", "A* Search"}));
																						
		searchTypeComboBox.addItemListener(new ItemListener() 
		{
			public void itemStateChanged(ItemEvent event) 
			{
				if(event.getStateChange()==ItemEvent.SELECTED)
				{
					Object source = event.getSource();
					if(source instanceof JComboBox)
					{
					//Set the search type to what the user has selected
						JComboBox<String> jcb = (JComboBox<String>)source;
						searchType = (String) jcb.getSelectedItem();
					}
				}
			}
		});
																												
		JButton startSearchBtn = new JButton("Start Search");
		startSearchBtn.setToolTipText("Begin the Search");
		ChangeButtonColour(startSearchBtn, searchPanel, 0, 2, 2);
		
		startSearchBtn.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent arg0) 
			{
				try
				{
					//pass the data to generate the graph for the search 
					GraphGenerator graphGen = new GraphGenerator();
						
					//blockSet is used to keep track of each node chosen
					blockSet.addAll(block);
									
					//count the number of that elements in blocks
					//if odd-> keep -> put to final list for 
					//if even-> do nothing			
					for(Node key : blockSet)
					{
						int x = Collections.frequency(block, key);
						if(x%2 == 1)
						{
							obstacles.add(key);
						}
					}
						
					GraphGenerator g = new GraphGenerator();
					LinkedHashMap<Integer, Node> graph= g.genGraph(chosenX, chosenY, obstacles);
			
					//open up the visualisation UI pass the search type graph start and end nodes
					VisualisationUI.openUI(searchType, graph, start, end);
					//VisualisationUI.openUI(searchType, graph, start, end);
					frame.setVisible(false);
								}
				catch(NullPointerException e)
				{
					JOptionPane.showMessageDialog(null, "You should set a start/goal node!");
				}
			}
		});
	}

	/**
	 * This method is used to clear all the parameters so that it starts clean.
	 */
	public static void refresh() 
	{
		chosenX = 0;
		chosenY = 0;
		block.clear();
		blockSet.clear();
		obstacles.clear();
	}
	
	/**
	 * Same code used for all buttons on page
	 * Sets colour and changes colour on mouse action 	
	 * @param button - JButton from page
	 */
	public static void ChangeButtonColour(JButton button, JPanel panel, int x, int y, int width){
		
		button.setFont(new Font("Yu Gothic UI Semibold", Font.PLAIN, 12));
		GridBagConstraints gbc_Btn = new GridBagConstraints();
		gbc_Btn.gridwidth = width;
		gbc_Btn.insets = new Insets(5, 5, 5, 5);
		gbc_Btn.fill = GridBagConstraints.BOTH;
		gbc_Btn.gridx = x;
		gbc_Btn.gridy = y;
		panel.add(button, gbc_Btn);
		
		button.setBackground(Color.DARK_GRAY);
		button.setForeground(new Color(210, 105, 30));
		button.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
		
		button.addMouseListener(new MouseAdapter()
		{
			 public void mouseEntered(MouseEvent evt)
	            {
	        		button.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
	        		button.setBackground(new Color(210, 105, 30));
	        		button.setForeground(Color.DARK_GRAY);
	            }
	            public void mouseExited(MouseEvent evt)
	            {
	        		button.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
	        		button.setBackground(Color.DARK_GRAY);
	        		button.setForeground(new Color(210, 105, 30));
	            }
	            public void mousePressed(MouseEvent evt)
	            {
	        		button.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
	            }
	            public void mouseReleased(MouseEvent evt)
	            {
	        		button.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
	            }
		});
	}
	
	public static void ComboBoxSetUp(JComboBox gridComboBox, JPanel panel,int x, int y, int width){
	
		gridComboBox.setFont(new Font("Yu Gothic UI Semibold", Font.PLAIN, 11));
		gridComboBox.setBackground(new Color(210, 105, 30));
		gridComboBox.setForeground(Color.DARK_GRAY);
		gridComboBox.setBorder(BorderFactory.createLineBorder(Color.DARK_GRAY));
		GridBagConstraints gbc_gridComboBox = new GridBagConstraints();
		gbc_gridComboBox.insets = new Insets(5, 5, 5, 5);
		gbc_gridComboBox.gridwidth = width;
		gbc_gridComboBox.gridx = x;
		gbc_gridComboBox.gridy = y;
		panel.add(gridComboBox, gbc_gridComboBox);
		
	}
	
	public static void lblSetUp(JLabel label, JPanel panel, int x, int y, int width)
	{	
		label.setForeground(Color.DARK_GRAY);
		label.setFont(new Font("Yu Gothic UI Semibold", Font.PLAIN, 16));
		GridBagConstraints gbc_lbl = new GridBagConstraints();
		gbc_lbl.fill = GridBagConstraints.BOTH;
		gbc_lbl.gridwidth = width;
		gbc_lbl.insets = new Insets(5, 5, 5, 5);
		gbc_lbl.gridx = x;
		gbc_lbl.gridy = y;
		panel.add(label, gbc_lbl);
	
		
	}
}