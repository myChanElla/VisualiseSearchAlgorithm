{
	"dfs" : "public class DFSAlgorithm \n { \n \t public Node dfs (Node start, Node goal) \n \t { \n \t \t Stack<Node> frontier = new Stack<Node>(); \n \t \t Set<Node> visited =  new HashSet<Node>(); \n \t \t frontier.push(start); \n \t \t while(!frontier.empty()) \n \t \t { \n \t \t \t Node x = frontier.pop(); \n \t \t \t if(!visited.contains(x) && x.getOpen() == true) \n \t \t \t { \n \t \t \t \t if (x == goal) \n \t \t \t \t { \n \t \t \t \t \t return x; \n \t \t \t \t } \n \t \t \t \t visited.add(x); \n \t \t \t \t frontier.addAll(x.getChildren()); \n \t \t \t } \n \t \t } \n \t \t return null; \n \t } \n }",

	"bfs" : "public class BFSAlgorithm \n { \n \t public Node bfs (Node start, Node goal) \n \t { \n \t \t Queue<Node> frontier = new LinkedList<Node>(); \n \t \t Set<Node> visited =  new HashSet<Node>(); \n \t \t frontier.add(start); \n \t \t while(!frontier.isEmpty()) \n \t \t { \n \t \t \t Node x = frontier.poll(); \n \t \t \t if(!visited.contains(x) && x.getOpen() == true) \n \t \t \t { \n \t \t \t \t if (x == goal) \n \t \t \t \t { \n \t \t \t \t \t return x; \n \t \t \t \t } \n \t \t \t \t visited.add(x); \n \t \t \t \t frontier.addAll(x.getChildren()); \n \t \t \t } \n \t \t } \n \t \t return null; \n \t } \n }",

	"astar" : "public class AstarAlgorithms \n { \n \t public Node astar (Node start, Node goal) \n \t { \n \t \t PriorityQueue<Node> frontier = new PriorityQueue<Node>(); \n \t \t Set<Node> visited = new HashSet<Node>(); \n \t \t start.genFValue(goal); \n \t \t frontier.add(start); \n \t \t while(!frontier.isEmpty()) \n \t \t { \n \t \t \t Node x = frontier.poll(); \n \t \t \t if(!visited.contains(x) && x.getOpen() == true) \n \t \t \t { \n \t \t \t \t if (x == goal) \n \t \t \t \t { \n \t \t \t \t \t return x; \n \t \t \t \t } \n \t \t \t \t else \n \t \t \t \t { \n \t \t \t \t \t visited.add(x); \n \t \t \t \t \t ArrayList<Node> children = new ArrayList<Node>(); \n \t \t \t \t \t children.addAll(x.getChildren()); \n \t \t \t \t \t for(Node child : children) \n \t \t \t \t \t { \n \t \t \t \t \t \t child.genFValue(goal); \n \t \t \t \t \t } \n \t \t \t \t \t frontier.addAll(x.getChildren()); \n \t \t \t \t } \n \t \t \t } \n \t \t } \n \t \t return null; \n \t } \n }",

	"menu" : "This program has been developed in order to teach you how some searching algorithms work \r \n \r \n Our program will allow you to explore Depth First Search, Breadth First Search and A* Search \r \n \r \nJust click the start button to learn how these searches work."
}