package search_algs;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import basics.Coordinate;
import basics.Node;
import javafx.application.Platform;
import javafx.scene.paint.Color;
import visualisation.VisualisationUI;
import visualisation.grid.GridVisualiser;
import visualisation.pseudocode.PseudoCodeGen;
import visualisation.pseudocode.PseudoCodeStrings;

public class Astar 
{
	PseudoCodeGen pseudoGen = new PseudoCodeGen();
	PseudoCodeStrings pseudoStrings = new PseudoCodeStrings();
	private int speed = 1000;
	private Map<Node, Node> pathmap;
	private boolean foundnode = false;
	public GridVisualiser grid = VisualisationUI.getGrid();
	
	public Astar()
	{
		this.pathmap = new LinkedHashMap<Node,Node>();
	}
	
	public Node astar (Node start, Node goal) 
	{
		try
		{
			//set start and goal node colors in javafx thread
			Platform.runLater(new Runnable() { 
	            @Override
	            public void run() {
	            	start.setColor(Color.GREEN);
	    			goal.setColor(Color.RED);	
	            }
	        });
			
			pseudoGen.addPseudoText("Starting A* Search ...\n");
			TimeUnit.MILLISECONDS.sleep(speed);
			pseudoGen.addPseudoText("Creating PriorityQueue<Node> frontier \n");
			PriorityQueue<Node> frontier = new PriorityQueue<Node>();
			pseudoGen.addPseudoText("Creating HashSet<Node> visited \n");
			Set<Node> visited = new HashSet<Node>();
			pseudoGen.addPseudoText("Creating LinkedHashMap<Node> distmap \n");
			TimeUnit.MILLISECONDS.sleep(speed);
			Map<Node, Double> distmap = new LinkedHashMap<Node, Double>();
			TimeUnit.MILLISECONDS.sleep(speed);
	
			start.genFValue(goal);
			frontier.add(start);
			pseudoGen.addPseudoText(pseudoStrings.addNode + start.toString() + "\n");
			TimeUnit.MILLISECONDS.sleep(speed);
			distmap.put(start, 0.0);
			pathmap.put(start, start);
	
			Set<Node> successors;
			pseudoGen.addPseudoText(pseudoStrings.whileLoop);
			TimeUnit.MILLISECONDS.sleep(speed);
	        while(!frontier.isEmpty()) 
	        {
				Node x = frontier.poll();
				if(x != start && x != goal && x.getOpen())
				{
					grid.changeColour(x.coord);
					
					//set node color in jfx thread
					Platform.runLater(new Runnable() { 
			            @Override
			            public void run() {
			            	x.setColor(Color.ORANGE);
			            }
			        });
				}
				pseudoGen.addPseudoText(pseudoStrings.pollNode + x.toString() + "\n");
				TimeUnit.MILLISECONDS.sleep(speed);
				pseudoGen.addPseudoText(pseudoStrings.checkNode + x.toString() + "\n");
				if(!visited.contains(x) && x.getOpen())
				{
					if (x == goal) 
					{
						pseudoGen.addPseudoText(x.toString() + pseudoStrings.doesEqual + "}" + "\n");
						pseudoGen.addPseudoText(pseudoStrings.completed);
						foundnode = true;
						return x;
					}
					else
					{
						visited.add(x);
						ArrayList<Node> children = new ArrayList<Node>();
						children.addAll(x.getChildren());
						for(Node child : children)
						{
							child.genFValue(goal);
						}
						frontier.addAll(x.getChildren());
					}
					
				}
	        }
	        pseudoGen.addPseudoText(pseudoStrings.failed + "}");
		}
		catch(InterruptedException e)
		{
			e.printStackTrace();
		}
		return null;
	}
	
	private double heuristic(Node n1, Double distance, Node end){
		Coordinate node = n1.getCoord();
		Coordinate goal = end.getCoord();
		return Math.sqrt(Math.pow(node.getX() - goal.getX(), 2)
						+ Math.pow(node.getY() - goal.getY() , 2));
	}
	private double distFunc(Node n1, Node n2){
		Coordinate node1 = n1.getCoord();
		Coordinate node2 = n2.getCoord();
		return Math.sqrt(Math.pow(node1.getX() - node2.getX(), 2)
						+ Math.pow(node1.getY() - node2.getY() , 2));
	}
	
	public ArrayList<Node> getPath(Node start, Node goal){
		ArrayList<Node> list = new ArrayList<Node>();
		if(!foundnode){ 
			System.out.print("goal node not reachable");
			list.add(start);
			return list;
		}
		Node z = goal;
		list.add(z);
		while (!(z.equals(start))) {
            z = pathmap.get(z);
            list.add(z);
        }
		Collections.reverse(list);
        return list;
	}
	
	public void setSpeed(int s)
	{
		speed = s;
	}
}
