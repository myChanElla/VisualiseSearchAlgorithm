import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;

public class Astar 
{
	public Node astar (Node start, Node goal) 
	{
		PriorityQueue<Node> frontier = new PriorityQueue<Node>();
		Set<Node> visited = new HashSet<Node>();
		Map<Node, Double> distmap = new LinkedHashMap<Node, Double>();

		start.genFValue(goal);
		frontier.add(start);
		distmap.put(start, 0.0);

		Node x;
		Set<Node> successors;
        while(!frontier.isEmpty()) 
        {
			x = frontier.poll();

			if(!visited.contains(x) && x.getOpen())
			{
				if (x == goal) 
				{
					return x;
				}
				visited.add(x);
				successors = x.getChildren();
				Iterator<Node> iter = successors.iterator();
				
				Node succ;
				//loop through all the children
				while (iter.hasNext()) {
					succ = iter.next();
                    if (!visited.contains(succ)) {
                        double cost = distmap.get(x) + distFunc(x, succ);
                        if (!frontier.contains(succ) || cost < distmap.get(succ)) {
                            distmap.put(succ, cost);
                            if (cost < distmap.get(succ)) {
                                succ.setPriority(heuristic(succ, distmap.get(succ), goal));
                            }
                            if (!frontier.contains(succ)) {
                                succ.setPriority(heuristic(succ, distmap.get(succ), goal));
                                frontier.add(succ);
                            }
                        }
                    }
                }
			}
			
		}
		return null; //if the search fails
	}
	private double heuristic(Node n1, Double distance, Node end){
		Coordinate node = n1.getCoord();
		Coordinate goal = end.getCoord();
		return Math.sqrt(Math.pow(node.getX() - goal.getX(), 2)
						+ Math.pow(node.getY() - goal.getY() , 2)) 
				+ distance;
	}
	private double distFunc(Node n1, Node n2){
		Coordinate node1 = n1.getCoord();
		Coordinate node2 = n2.getCoord();
		return Math.sqrt(Math.pow(node1.getX() - node2.getX(), 2)
						+ Math.pow(node1.getY() - node2.getY() , 2));
	}
}
